<?php

class RdThemeUpdater {

	/** @var string */
	protected $username = 'rd_api';

	/** @var string */
	protected $password = 'UnrisenRegalnessPostgeminumPoriness7';

	/** @var string */
	protected $api_key = 'FJeEZTDDDdrKv5umFpxrJMx4gGQEIHVZ';

	/** @var string */
	protected $repository_path = 'rddev/fonzie';

	/**
	 * The latest tag returned from vcs.
	 *
	 * @var array
	 */
	protected $tag;

	/**
	 * The latest published-at date returned from vcs.
	 *
	 * @var string
	 */
	protected $published;

	/**
	 * The array of data available about the current theme.
	 *
	 * Generated by using the wp_get_theme() wordpress function
	 *
	 * @var array
	 */
	protected $themeData;

	/**
	 * The slug of the current theme.
	 *
	 * @var string
	 */
	protected $slug;

	/**
	 * Where to download the latest package
	 *
	 * @var string
	 */
	protected $downloadUrl;

	function __construct( $stylesheet ) {
		$this->themeData = wp_get_theme( $stylesheet );
		$this->slug      = $this->themeData->get_stylesheet();

		$this->init();
	}

	public function init() {
		// Un-comment to test - makes WP check every time for new themes
		// delete_option( '_site_transient_update_themes' );

		add_filter( 'pre_set_site_transient_update_themes', [ $this, 'RdThemeUpdaterCheckUpdate' ] );
		add_filter( 'upgrader_source_selection', [ $this, 'alterDirectoryNameDuringUpgrade' ], 10, 4 );

		// Clear cache so wp_update_themes() knows about the new theme.
		add_action( 'upgrader_process_complete', 'wp_clean_themes_cache', 9, 0 );

		// intercept bitbucket request and add basic auth
		add_filter( 'http_request_args', [ $this, 'RdThemeUpdaterAuthenticateHttp' ], 10, 2 );
	}

	/**
	 * Retrieve latest info about theme from vcs.
	 */
	protected function RdThemeUpdatergetLatestBitbucketInfo() {
		$url = "https://api.bitbucket.org/1.0/repositories/{$this->repository_path}/tags";

		$args = [
			'headers' => [
				'Authorization' => 'Basic ' . base64_encode( "charitypress:{$this->api_key}" )
			]
		];

		$json = wp_remote_retrieve_body( wp_remote_get( $url, $args ) );

		if ( ! empty( $json ) ) {
			$results           = json_decode( $json, true );
			$this->tag         = $this->getHighestTag( array_keys( $results ) );
			$this->published   = $results[ $this->tag ]['timestamp'];
			$this->downloadUrl = "https://bitbucket.org/{$this->repository_path}/get/{$this->tag}.zip";
		}

	}

	protected function getHighestTag( array $tags ) {
		usort($tags, 'version_compare');
		return end($tags);
	}

	/**
	 * Function used as callback to the 'pre_set_site_transient_update_themes' hook.
	 * Checks current theme version number against vcs latest.
	 * If update is required then fills out the response object with the latest data for the file.
	 *
	 * @param mixed $transient Value of 'update_themes' site transient.
	 *
	 * @return mixed Updated Value of 'update_themes' site transient.
	 */
	public function RdThemeUpdaterCheckUpdate( $transient ) {
		// If we have checked the theme data before, don't re-check
		if ( empty( $transient->checked ) ) {
			return $transient;
		}

		$this->RdThemeUpdatergetLatestBitbucketInfo();

		$updateRequired = version_compare( $this->tag, $transient->checked[ $this->slug ] );

		if ( 1 === $updateRequired ) {
			$transient->response[ $this->slug ] = array(
				'new_version' => $this->tag,
				'package'     => $this->downloadUrl,
				//'url' => ''
			);
		}

		return $transient;

	}

	/**
	 * Intercept bitbucket requests and add basic auth
	 *
	 * @param $args
	 * @param $url
	 *
	 * @return array
	 */
	public function RdThemeUpdaterAuthenticateHttp( $args, $url ) {
		if ( false === stristr( $url, $this->repository_path ) ) {
			return $args;
		}

		$args['headers']['Authorization'] = 'Basic ' . base64_encode( "{$this->username}:{$this->password}" );

		return $args;
	}

	/**
	 * Method called during theme update, after file has been downloaded to the upgrade folder.
	 * Used here to rename the containing directory from it's mad bitbucket name to what we actually want it to be.
	 *
	 * @param string $source
	 * @param string $remote_source
	 * @param \Theme_Upgrader $upgrader
	 * @param array $hook_extra Extra arguments passed to hooked filters
	 *
	 * @return string
	 */
	public function alterDirectoryNameDuringUpgrade( $source, $remote_source, $upgrader, $hook_extra ) {

		if ( is_wp_error( $source ) ) {
			return $source;
		}

		if ( ! ( $upgrader instanceof \Theme_Upgrader ) ) {
			return $source;
		}

		if ( strpos( $source, basename( $this->repository_path) ) === false ) {
			return $source;
		}

		global $wp_filesystem;

		$new_source = trailingslashit( $remote_source ) . $this->themeData->get_stylesheet();
		$wp_filesystem->move( $source, $new_source );

		return trailingslashit( $new_source );
	}
}
